Файл register.js содержит JavaScript-код, который управляет процессом отправки
формы регистрации на сервер, обрабатывает ответы сервера и отображает соответствующие 
уведомления и индикаторы валидации. Этот скрипт обеспечивает удобное взаимодействие с 
пользователем, предоставляя обратную связь при успешной регистрации или ошибках. 

    1. Ожидание загрузки DOM
            document.addEventListener("DOMContentLoaded", function () { ... }):
        Этот код гарантирует, что скрипт выполнится только после того, 
        как весь HTML-документ будет полностью загружен и готов к взаимодействию.
        Это важно, потому что скрипт взаимодействует с элементами DOM (формой, 
        индикаторами и уведомлениями), которые должны быть доступны на момент выполнения кода.

    2. Получение формы и добавление обработчика события
        Получает ссылку на форму с id registrationForm.

            form.addEventListener("submit", function (event) { ... }):
        Добавляет обработчик события submit на форму.
        Когда пользователь пытается отправить форму, выполняется функция, 
        которая отправляет данные на сервер и обрабатывает ответ.

            event.preventDefault():
        Отменяет стандартное поведение формы (отправку данных и перезагрузку страницы).

            const formData = new FormData(form):
        Создает объект FormData, который содержит данные формы.

            fetch(form.action, { ... }):
        Отправляет данные формы на сервер с помощью метода fetch.

            method: "POST": Указывает метод HTTP-запроса.

            body: formData: Передает данные формы.

            headers: { "Accept": "application/json" }: Указывает, что ожидается ответ в формате JSON.

            .then(response => { ... }):
        Обрабатывает ответ сервера.
        Если ответ не успешный (!response.ok), выбрасывается ошибка.

            .then(data => { ... }):
        Обрабатывает данные, полученные от сервера.

            clearErrors(): Очищает предыдущие сообщения об ошибках.

            clearIndicators(): Очищает индикаторы валидации.

        Если статус ответа success:

            setIndicators("valid"): Показывает зеленые индикаторы для всех полей.

            showNotification(data.message, "success"): Отображает уведомление об успехе.

            form.reset(): Очищает форму.

        Если статус ответа error:

            data.errors: Если есть ошибки, они отображаются в блоке error-summary.

            showNotification(data.message, "error"): Отображает общее сообщение об ошибке.

            .catch(error => { ... }):
        Обрабатывает ошибки, возникшие при отправке запроса.

            showNotification("Ошибка при отправке запроса.", "error"): Отображает уведомление об ошибке.

    3. Вспомогательные функции
            clearErrors():
        Очищает все сообщения об ошибках в блоке error-summary.

            function clearErrors() {
                const errorSummary = document.getElementById("error-summary");
                if (errorSummary) {
                    errorSummary.innerHTML = "";
                    errorSummary.style.display = "none"; // Скрываем блок, если ошибок нет
                }
            }
            clearIndicators():
        Очищает все индикаторы валидации.

            function clearIndicators() {
                const indicators = document.querySelectorAll(".validation-indicator");
                indicators.forEach(indicator => {
                    indicator.classList.remove("valid", "invalid");
                });
            }
            setIndicators(status):
        Устанавливает индикаторы валидации для всех полей.


            function setIndicators(status) {
                const indicators = document.querySelectorAll(".validation-indicator");
                indicators.forEach(indicator => {
                    indicator.classList.add(status);
                });
            }
            showNotification(message, type):
        Отображает уведомление с сообщением.

            function showNotification(message, type) {
                const notification = document.getElementById("notification");
                if (!notification) {
                    console.error("Элемент с ID 'notification' не найден.");
                    return;
                }
                notification.textContent = message;
                notification.className = type; // Добавляем класс для стилизации
                notification.style.display = "block";

                // Скрыть уведомление через 5 секунд
                setTimeout(() => {
                    notification.style.display = "none";
                }, 5000);
            }
    4. Как работает скрипт
        Инициализация:
            После загрузки страницы скрипт находит форму регистрации и добавляет обработчик события submit.
        Отправка данных:
            При отправке формы данные отправляются на сервер с помощью fetch.
        Обработка ответа:
            Если регистрация успешна, отображаются зеленые индикаторы и уведомление об успехе.
            Если есть ошибки, отображаются красные индикаторы и сообщения об ошибках.
        Очистка формы:
            После успешной регистрации форма очищается.